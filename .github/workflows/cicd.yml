name: Build, Push Docker Image and Deploy on EC2

on:
  push:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'ev-store-be/**'
            frontend:
              - 'ev-store-vite-client/**'
  build:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Build with Maven
        working-directory: ./ev-store-be
        run: |
          echo "pwd" && \
          pwd &&\
          ls -la &&\
          echo "Building project..." && \
          mvn clean package -DskipTests && \
          pwd && \
          ls -la && \
          ls -la target

      - name: Build docker image
        working-directory: ./ev-store-be
        run: |
          pwd && \
          ls -la && \
          docker build -t  ${{secrets.DOCKER_USERNAME}}/ev-store-be:latest .

      - name: Push image to docker hub
        run: docker push ${{secrets.DOCKER_USERNAME}}/ev-store-be:latest

  deploy:
    needs: build
    runs-on: [ self-hosted, aws-ec2-evstore ]
    steps:
      - name: Pull Image from docker hub
        run: docker pull ${{secrets.DOCKER_USERNAME}}/ev-store-be:latest

      - name: Delete old container
        run: docker rm -f ev-store-be-container || true

      - name: Run docker container
        run: |
          docker run -d \
            --name ev-store-be-container \
            -e JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005" \
            -e EV_STORE_JWT_SECRET=${{ secrets.EV_STORE_JWT_SECRET }} \
            -e EMAIL_SENDER_USERNAME=${{ secrets.EMAIL_SENDER_USERNAME }} \
            -e EMAIL_SENDER_PASSWORD=${{ secrets.EMAIL_SENDER_PASSWORD }} \
            -e EV_STORE_DATASOURCE_URL=${{ secrets.EV_STORE_DATASOURCE_URL }} \
            -e EV_STORE_DATASOURCE_USERNAME=${{ secrets.EV_STORE_DATASOURCE_USERNAME }} \
            -e EV_STORE_DATASOURCE_PASSWORD=${{ secrets.EV_STORE_DATASOURCE_PASSWORD }} \
            -e EV_STORE_EMAIL_ADDRESS=${{ secrets.EV_STORE_EMAIL_ADDRESS }} \
            -p 8080:8080 \
            -p 443:443 \
            -p 5005:5005 \
            ${{ secrets.DOCKER_USERNAME }}/ev-store-be:latest
  deploy-client:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: build client app
        run: |
          cd ev-store-vite-client && \
          npm install && \
          npm run build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to S3
        run: |
          aws s3 sync ev-store-vite-client/dist s3://ev-store-client
      - name: Revalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id E21E1G3Q9IQHYO --paths "/*"


#        run: docker run -d -p 8080:8080 --name ev-store-container ${{secrets.DOCKER_USERNAME}}/ev-store-be:latest